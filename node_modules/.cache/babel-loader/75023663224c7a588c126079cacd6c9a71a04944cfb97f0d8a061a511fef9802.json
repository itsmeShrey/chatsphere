{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\chatsphere\\\\src\\\\components\\\\ContactList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/contactList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContactList = () => {\n  _s();\n  const {\n    contacts,\n    dispatchContacts\n  } = useContext(GlobalContext);\n  const {\n    getFromDB,\n    addToDB\n  } = useIndexedDB();\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        // Try fetching from IndexedDB first\n        const storedContacts = await getFromDB('contacts');\n        if (storedContacts.length) {\n          dispatchContacts({\n            type: 'SET_CONTACTS',\n            payload: storedContacts\n          });\n        } else {\n          // Otherwise, fetch from API (or use static data)\n          const contactData = [{\n            id: 1,\n            name: 'Alice'\n          }, {\n            id: 2,\n            name: 'Bob'\n          }];\n          contactData.forEach(contact => addToDB('contacts', contact));\n          dispatchContacts({\n            type: 'SET_CONTACTS',\n            payload: contactData\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n      }\n    };\n    fetchContacts();\n  }, [dispatchContacts, getFromDB, addToDB]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contact-list\",\n    children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-item\",\n      children: contact.name\n    }, contact.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(ContactList, \"95cFUD4c/SQz7h80H6ibO5FWALE=\", false, function () {\n  return [useIndexedDB];\n});\n_c = ContactList;\nexport default ContactList;\nvar _c;\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"names":["React","useContext","useEffect","GlobalContext","useIndexedDB","jsxDEV","_jsxDEV","ContactList","_s","contacts","dispatchContacts","getFromDB","addToDB","fetchContacts","storedContacts","length","type","payload","contactData","id","name","forEach","contact","error","console","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/chatsphere/src/components/ContactList.jsx"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/contactList.css';\n\nconst ContactList = () => {\n    const { contacts, dispatchContacts } = useContext(GlobalContext);\n    const { getFromDB, addToDB } = useIndexedDB();\n\n    useEffect(() => {\n        const fetchContacts = async () => {\n            try {\n                // Try fetching from IndexedDB first\n                const storedContacts = await getFromDB('contacts');\n                if (storedContacts.length) {\n                    dispatchContacts({ type: 'SET_CONTACTS', payload: storedContacts });\n                } else {\n                    // Otherwise, fetch from API (or use static data)\n                    const contactData = [\n                        { id: 1, name: 'Alice' },\n                        { id: 2, name: 'Bob' },\n                    ];\n                    contactData.forEach((contact) => addToDB('contacts', contact));\n                    dispatchContacts({ type: 'SET_CONTACTS', payload: contactData });\n                }\n            } catch (error) {\n                console.error('Error fetching contacts:', error);\n            }\n        };\n\n        fetchContacts();\n    }, [dispatchContacts, getFromDB, addToDB]);\n\n    return (\n        <div className=\"contact-list\">\n            {contacts.map((contact) => (\n                <div key={contact.id} className=\"contact-item\">\n                    {contact.name}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default ContactList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,QAAQ;IAAEC;EAAiB,CAAC,GAAGT,UAAU,CAACE,aAAa,CAAC;EAChE,MAAM;IAAEQ,SAAS;IAAEC;EAAQ,CAAC,GAAGR,YAAY,CAAC,CAAC;EAE7CF,SAAS,CAAC,MAAM;IACZ,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA;QACA,MAAMC,cAAc,GAAG,MAAMH,SAAS,CAAC,UAAU,CAAC;QAClD,IAAIG,cAAc,CAACC,MAAM,EAAE;UACvBL,gBAAgB,CAAC;YAAEM,IAAI,EAAE,cAAc;YAAEC,OAAO,EAAEH;UAAe,CAAC,CAAC;QACvE,CAAC,MAAM;UACH;UACA,MAAMI,WAAW,GAAG,CAChB;YAAEC,EAAE,EAAE,CAAC;YAAEC,IAAI,EAAE;UAAQ,CAAC,EACxB;YAAED,EAAE,EAAE,CAAC;YAAEC,IAAI,EAAE;UAAM,CAAC,CACzB;UACDF,WAAW,CAACG,OAAO,CAAEC,OAAO,IAAKV,OAAO,CAAC,UAAU,EAAEU,OAAO,CAAC,CAAC;UAC9DZ,gBAAgB,CAAC;YAAEM,IAAI,EAAE,cAAc;YAAEC,OAAO,EAAEC;UAAY,CAAC,CAAC;QACpE;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IAEDV,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACH,gBAAgB,EAAEC,SAAS,EAAEC,OAAO,CAAC,CAAC;EAE1C,oBACIN,OAAA;IAAKmB,SAAS,EAAC,cAAc;IAAAC,QAAA,EACxBjB,QAAQ,CAACkB,GAAG,CAAEL,OAAO,iBAClBhB,OAAA;MAAsBmB,SAAS,EAAC,cAAc;MAAAC,QAAA,EACzCJ,OAAO,CAACF;IAAI,GADPE,OAAO,CAACH,EAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEf,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACvB,EAAA,CArCID,WAAW;EAAA,QAEkBH,YAAY;AAAA;AAAA4B,EAAA,GAFzCzB,WAAW;AAuCjB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}