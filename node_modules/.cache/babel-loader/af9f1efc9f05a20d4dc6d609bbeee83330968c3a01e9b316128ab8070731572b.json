{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\chatsphere\\\\src\\\\components\\\\ContactList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/contactList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContactList = () => {\n  _s();\n  const {\n    contacts,\n    dispatchContacts,\n    selectedContact,\n    setSelectedContact\n  } = useContext(GlobalContext);\n  const {\n    getFromDB,\n    addToDB,\n    deleteFromDB\n  } = useIndexedDB();\n  const [newContactName, setNewContactName] = useState('');\n  const [newContactPic, setNewContactPic] = useState('');\n  const [showForm, setShowForm] = useState(false); // Toggle for add contact form\n  const [showOptions, setShowOptions] = useState(false); // To show contact options\n  const [showArchived, setShowArchived] = useState(false); // Toggle archived section\n  const [archivedContacts, setArchivedContacts] = useState([]); // State for archived contacts\n  const [theme, setTheme] = useState('light'); // Default theme\n  const [editingContact, setEditingContact] = useState(null); // For editing contact name\n  const [favorites, setFavorites] = useState([]); // State for favorite contacts\n\n  // Fetch contacts from IndexedDB or static data\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        const storedContacts = await getFromDB('contacts');\n        if (storedContacts.length) {\n          dispatchContacts({\n            type: 'SET_CONTACTS',\n            payload: storedContacts\n          });\n        } else {\n          const contactData = [{\n            id: 1,\n            name: 'Alice',\n            pic: '',\n            favorite: false\n          }, {\n            id: 2,\n            name: 'Bob',\n            pic: '',\n            favorite: false\n          }];\n          contactData.forEach(contact => addToDB('contacts', contact));\n          dispatchContacts({\n            type: 'SET_CONTACTS',\n            payload: contactData\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n      }\n    };\n    fetchContacts();\n  }, [dispatchContacts, getFromDB, addToDB]);\n\n  // Add a new contact\n  const handleAddContact = async () => {\n    if (newContactName.trim()) {\n      const newContact = {\n        id: Date.now(),\n        name: newContactName,\n        pic: newContactPic || '',\n        // Optional profile picture\n        favorite: false // Default is not a favorite\n      };\n      await addToDB('contacts', newContact);\n      dispatchContacts({\n        type: 'ADD_CONTACT',\n        payload: newContact\n      });\n      setNewContactName('');\n      setNewContactPic('');\n      setShowForm(false); // Close the form\n    }\n  };\n\n  // Delete a contact\n  const handleDeleteContact = async id => {\n    await deleteFromDB('contacts', id);\n    dispatchContacts({\n      type: 'DELETE_CONTACT',\n      payload: id\n    });\n  };\n\n  // Archive contact\n  const handleArchiveContact = contact => {\n    setArchivedContacts(prev => [...prev, contact]); // Add to archived contacts\n    handleDeleteContact(contact.id); // Remove from the active contacts list\n  };\n\n  // Toggle favorites\n  const handleToggleFavorite = id => {\n    const updatedContacts = contacts.map(contact => contact.id === id ? {\n      ...contact,\n      favorite: !contact.favorite\n    } : contact);\n    setFavorites(updatedContacts.filter(contact => contact.favorite));\n    dispatchContacts({\n      type: 'SET_CONTACTS',\n      payload: updatedContacts\n    });\n  };\n\n  // Edit contact (open the edit form)\n  const handleEditContact = id => {\n    const contactToEdit = contacts.find(contact => contact.id === id);\n    setEditingContact(contactToEdit);\n    setShowOptions(false);\n  };\n\n  // Save the edited contact\n  const handleSaveEdit = async () => {\n    if (editingContact.name.trim()) {\n      const updatedContacts = contacts.map(contact => contact.id === editingContact.id ? editingContact : contact);\n      dispatchContacts({\n        type: 'SET_CONTACTS',\n        payload: updatedContacts\n      });\n      await addToDB('contacts', updatedContacts);\n      setEditingContact(null); // Close the edit form\n    }\n  };\n\n  // Cancel editing\n  const handleCancelEdit = () => {\n    setEditingContact(null);\n  };\n\n  // Show contact options\n  const handleProfileClick = contact => {\n    setSelectedContact(contact.id);\n    setShowOptions(true);\n  };\n\n  // Toggle Theme (Emoji Click)\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    document.body.className = newTheme; // Apply theme to the body\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `contact-list ${theme}`,\n    children: [showArchived && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"archived-contacts\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Archived Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"archivedItems\",\n        children: archivedContacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-pic-container\",\n            children: contact.pic ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: contact.pic,\n              alt: contact.name,\n              className: \"contact-pic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"contact-initial\",\n              children: contact.name[0].toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"contact-name\",\n              children: contact.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 33\n          }, this)]\n        }, contact.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Contacts\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"add-contact-icon\",\n          onClick: () => setShowForm(!showForm),\n          children: \"\\u2795\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"theme-toggle\",\n          onClick: toggleTheme,\n          children: \"\\uD83C\\uDF17\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"archive-toggle-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowArchived(!showArchived),\n          children: showArchived ? 'Hide Archived' : 'Show Archived'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-contact-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter contact name\",\n        value: newContactName,\n        onChange: e => setNewContactName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter profile picture URL (optional)\",\n        value: newContactPic,\n        onChange: e => setNewContactPic(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddContact,\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }, this), contacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `contact-item ${selectedContact === contact.id ? 'selected' : ''}`,\n      onClick: () => setSelectedContact(contact.id),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-pic-container\",\n        onClick: () => handleProfileClick(contact),\n        children: contact.pic ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: contact.pic,\n          alt: contact.name,\n          className: \"contact-pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-initial\",\n          children: contact.name[0].toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-info\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"contact-name\",\n          children: contact.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleArchiveContact(contact),\n        children: \"Archive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleToggleFavorite(contact.id),\n        children: [contact.favorite ? '❤️' : '🤍', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this)]\n    }, contact.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this)), showOptions && selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBlockContact(selectedContact),\n        children: \"Block\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEditContact(selectedContact),\n        children: \"Edit Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAddToFavorites(selectedContact),\n        children: \"Add to Favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDeleteContact(selectedContact),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }, this), editingContact && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-contact-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editingContact.name,\n        onChange: e => setEditingContact({\n          ...editingContact,\n          name: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveEdit,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancelEdit,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(ContactList, \"FYL3ruKFO8gGRSMDvldGTt+CflA=\", false, function () {\n  return [useIndexedDB];\n});\n_c = ContactList;\nexport default ContactList;\nvar _c;\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"names":["React","useContext","useEffect","useState","GlobalContext","useIndexedDB","jsxDEV","_jsxDEV","ContactList","_s","contacts","dispatchContacts","selectedContact","setSelectedContact","getFromDB","addToDB","deleteFromDB","newContactName","setNewContactName","newContactPic","setNewContactPic","showForm","setShowForm","showOptions","setShowOptions","showArchived","setShowArchived","archivedContacts","setArchivedContacts","theme","setTheme","editingContact","setEditingContact","favorites","setFavorites","fetchContacts","storedContacts","length","type","payload","contactData","id","name","pic","favorite","forEach","contact","error","console","handleAddContact","trim","newContact","Date","now","handleDeleteContact","handleArchiveContact","prev","handleToggleFavorite","updatedContacts","map","filter","handleEditContact","contactToEdit","find","handleSaveEdit","handleCancelEdit","handleProfileClick","toggleTheme","newTheme","document","body","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","toUpperCase","onClick","placeholder","value","onChange","e","target","handleBlockContact","handleAddToFavorites","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/chatsphere/src/components/ContactList.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/contactList.css';\n\nconst ContactList = () => {\n    const { contacts, dispatchContacts, selectedContact, setSelectedContact } = useContext(GlobalContext);\n    const { getFromDB, addToDB, deleteFromDB } = useIndexedDB();\n    const [newContactName, setNewContactName] = useState('');\n    const [newContactPic, setNewContactPic] = useState('');\n    const [showForm, setShowForm] = useState(false); // Toggle for add contact form\n    const [showOptions, setShowOptions] = useState(false); // To show contact options\n    const [showArchived, setShowArchived] = useState(false); // Toggle archived section\n    const [archivedContacts, setArchivedContacts] = useState([]); // State for archived contacts\n    const [theme, setTheme] = useState('light'); // Default theme\n    const [editingContact, setEditingContact] = useState(null); // For editing contact name\n    const [favorites, setFavorites] = useState([]); // State for favorite contacts\n\n    // Fetch contacts from IndexedDB or static data\n    useEffect(() => {\n        const fetchContacts = async () => {\n            try {\n                const storedContacts = await getFromDB('contacts');\n                if (storedContacts.length) {\n                    dispatchContacts({ type: 'SET_CONTACTS', payload: storedContacts });\n                } else {\n                    const contactData = [\n                        { id: 1, name: 'Alice', pic: '', favorite: false },\n                        { id: 2, name: 'Bob', pic: '', favorite: false },\n                    ];\n                    contactData.forEach((contact) => addToDB('contacts', contact));\n                    dispatchContacts({ type: 'SET_CONTACTS', payload: contactData });\n                }\n            } catch (error) {\n                console.error('Error fetching contacts:', error);\n            }\n        };\n\n        fetchContacts();\n    }, [dispatchContacts, getFromDB, addToDB]);\n\n    // Add a new contact\n    const handleAddContact = async () => {\n        if (newContactName.trim()) {\n            const newContact = {\n                id: Date.now(),\n                name: newContactName,\n                pic: newContactPic || '', // Optional profile picture\n                favorite: false, // Default is not a favorite\n            };\n            await addToDB('contacts', newContact);\n            dispatchContacts({ type: 'ADD_CONTACT', payload: newContact });\n            setNewContactName('');\n            setNewContactPic('');\n            setShowForm(false); // Close the form\n        }\n    };\n\n    // Delete a contact\n    const handleDeleteContact = async (id) => {\n        await deleteFromDB('contacts', id);\n        dispatchContacts({ type: 'DELETE_CONTACT', payload: id });\n    };\n\n    // Archive contact\n    const handleArchiveContact = (contact) => {\n        setArchivedContacts((prev) => [...prev, contact]); // Add to archived contacts\n        handleDeleteContact(contact.id); // Remove from the active contacts list\n    };\n\n    // Toggle favorites\n    const handleToggleFavorite = (id) => {\n        const updatedContacts = contacts.map(contact =>\n            contact.id === id ? { ...contact, favorite: !contact.favorite } : contact\n        );\n        setFavorites(updatedContacts.filter(contact => contact.favorite));\n        dispatchContacts({ type: 'SET_CONTACTS', payload: updatedContacts });\n    };\n\n    // Edit contact (open the edit form)\n    const handleEditContact = (id) => {\n        const contactToEdit = contacts.find(contact => contact.id === id);\n        setEditingContact(contactToEdit);\n        setShowOptions(false);\n    };\n\n    // Save the edited contact\n    const handleSaveEdit = async () => {\n        if (editingContact.name.trim()) {\n            const updatedContacts = contacts.map(contact =>\n                contact.id === editingContact.id ? editingContact : contact\n            );\n            dispatchContacts({ type: 'SET_CONTACTS', payload: updatedContacts });\n            await addToDB('contacts', updatedContacts);\n            setEditingContact(null); // Close the edit form\n        }\n    };\n\n    // Cancel editing\n    const handleCancelEdit = () => {\n        setEditingContact(null);\n    };\n\n    // Show contact options\n    const handleProfileClick = (contact) => {\n        setSelectedContact(contact.id);\n        setShowOptions(true);\n    };\n\n    // Toggle Theme (Emoji Click)\n    const toggleTheme = () => {\n        const newTheme = theme === 'light' ? 'dark' : 'light';\n        setTheme(newTheme);\n        document.body.className = newTheme; // Apply theme to the body\n    };\n\n    return (\n        <div className={`contact-list ${theme}`}>\n            {/* Archived Contacts Section */}\n            {showArchived && (\n                <div className=\"archived-contacts\">\n                    <h3>Archived Contacts</h3>\n                    <div id=\"archivedItems\">\n                        {archivedContacts.map((contact) => (\n                            <div key={contact.id} className=\"contact-item\">\n                                <div className=\"contact-pic-container\">\n                                    {contact.pic ? (\n                                        <img src={contact.pic} alt={contact.name} className=\"contact-pic\" />\n                                    ) : (\n                                        <div className=\"contact-initial\">\n                                            {contact.name[0].toUpperCase()}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"contact-info\">\n                                    <span className=\"contact-name\">{contact.name}</span>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n\n            {/* Contact List Header */}\n            <div className=\"contact-list-header\">\n                <h2>\n                    Contacts\n                    <span className=\"add-contact-icon\" onClick={() => setShowForm(!showForm)}>\n                        ➕\n                    </span>\n                    <span className=\"theme-toggle\" onClick={toggleTheme}>\n                        🌗\n                    </span>\n                </h2>\n\n                <div className=\"archive-toggle-container\">\n                    <button onClick={() => setShowArchived(!showArchived)}>\n                        {showArchived ? 'Hide Archived' : 'Show Archived'}\n                    </button>\n                </div>\n            </div>\n\n            {/* Add New Contact Form */}\n            {showForm && (\n                <div className=\"add-contact-form\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter contact name\"\n                        value={newContactName}\n                        onChange={(e) => setNewContactName(e.target.value)}\n                    />\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter profile picture URL (optional)\"\n                        value={newContactPic}\n                        onChange={(e) => setNewContactPic(e.target.value)}\n                    />\n                    <button onClick={handleAddContact}>Add Contact</button>\n                </div>\n            )}\n\n            {/* Contact List */}\n            {contacts.map((contact) => (\n                <div\n                    key={contact.id}\n                    className={`contact-item ${selectedContact === contact.id ? 'selected' : ''}`}\n                    onClick={() => setSelectedContact(contact.id)}\n                >\n                    <div className=\"contact-pic-container\" onClick={() => handleProfileClick(contact)}>\n                        {contact.pic ? (\n                            <img src={contact.pic} alt={contact.name} className=\"contact-pic\" />\n                        ) : (\n                            <div className=\"contact-initial\">\n                                {contact.name[0].toUpperCase()}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"contact-info\">\n                        <span className=\"contact-name\">{contact.name}</span>\n                    </div>\n                    <button onClick={() => handleArchiveContact(contact)}>Archive</button>\n                    <button onClick={() => handleToggleFavorite(contact.id)}>\n                        {contact.favorite ? '❤️' : '🤍'} {/* Heart icon for favorites */}\n                    </button>\n                </div>\n            ))}\n\n            {/* Contact Options Menu */}\n            {showOptions && selectedContact && (\n                <div className=\"contact-options\">\n                    <button onClick={() => handleBlockContact(selectedContact)}>Block</button>\n                    <button onClick={() => handleEditContact(selectedContact)}>Edit Contact</button>\n                    <button onClick={() => handleAddToFavorites(selectedContact)}>Add to Favorites</button>\n                    <button onClick={() => handleDeleteContact(selectedContact)}>Delete</button>\n                </div>\n            )}\n\n            {/* Edit Contact Form */}\n            {editingContact && (\n                <div className=\"edit-contact-form\">\n                    <input\n                        type=\"text\"\n                        value={editingContact.name}\n                        onChange={(e) =>\n                            setEditingContact({ ...editingContact, name: e.target.value })\n                        }\n                    />\n                    <button onClick={handleSaveEdit}>Save</button>\n                    <button onClick={handleCancelEdit}>Cancel</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ContactList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}