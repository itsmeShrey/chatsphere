{"ast":null,"code":"import axios from 'axios';\nconst useInstantDB = () => {\n  const instance = axios.create({\n    baseURL: process.env.REACT_APP_INSTANTDB_URL,\n    // Use the URL from the .env file\n    headers: {\n      Authorization: `Bearer ${process.env.REACT_APP_INSTANTDB_API_KEY}` // Use the API key from the .env file\n    }\n  });\n\n  // Fetch messages for a contact\n  const getMessages = async contactId => {\n    try {\n      const response = await instance.get(`/messages/${contactId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      return [];\n    }\n  };\n\n  // Send a new message\n  const sendMessage = async message => {\n    try {\n      const response = await instance.post('/messages', message);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return {\n    getMessages,\n    sendMessage\n  };\n};\nexport default useInstantDB;","map":{"version":3,"names":["axios","useInstantDB","instance","create","baseURL","process","env","REACT_APP_INSTANTDB_URL","headers","Authorization","REACT_APP_INSTANTDB_API_KEY","getMessages","contactId","response","get","data","error","console","sendMessage","message","post"],"sources":["C:/Users/User/OneDrive/Desktop/chatsphere/src/hooks/useInstantDB.js"],"sourcesContent":["import axios from 'axios';\n\nconst useInstantDB = () => {\n    const instance = axios.create({\n        baseURL: process.env.REACT_APP_INSTANTDB_URL, // Use the URL from the .env file\n        headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_INSTANTDB_API_KEY}`, // Use the API key from the .env file\n        },\n    });\n\n    // Fetch messages for a contact\n    const getMessages = async (contactId) => {\n        try {\n            const response = await instance.get(`/messages/${contactId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n            return [];\n        }\n    };\n\n    // Send a new message\n    const sendMessage = async (message) => {\n        try {\n            const response = await instance.post('/messages', message);\n            return response.data;\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    return { getMessages, sendMessage };\n};\n\nexport default useInstantDB;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;IAC1BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,uBAAuB;IAAE;IAC9CC,OAAO,EAAE;MACLC,aAAa,EAAE,UAAUJ,OAAO,CAACC,GAAG,CAACI,2BAA2B,EAAE,CAAE;IACxE;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMC,WAAW,GAAG,MAAOC,SAAS,IAAK;IACrC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACY,GAAG,CAAC,aAAaF,SAAS,EAAE,CAAC;MAC7D,OAAOC,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,EAAE;IACb;EACJ,CAAC;;EAED;EACA,MAAME,WAAW,GAAG,MAAOC,OAAO,IAAK;IACnC,IAAI;MACA,MAAMN,QAAQ,GAAG,MAAMX,QAAQ,CAACkB,IAAI,CAAC,WAAW,EAAED,OAAO,CAAC;MAC1D,OAAON,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,OAAO;IAAEL,WAAW;IAAEO;EAAY,CAAC;AACvC,CAAC;AAED,eAAejB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}