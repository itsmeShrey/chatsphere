{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\chatsphere\\\\src\\\\components\\\\MessageInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/messageInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageInput = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const {\n    dispatchMessages,\n    selectedContact\n  } = useContext(GlobalContext);\n  const {\n    addToDB\n  } = useIndexedDB();\n  const handleSend = async () => {\n    if (!selectedContact) return; // Prevent sending without a selected contact\n\n    const newMessage = {\n      id: Date.now(),\n      text: input,\n      sender: 'me',\n      timestamp: new Date().toLocaleTimeString(),\n      contactId: selectedContact // Associate with selected contact\n    };\n    try {\n      await addToDB('messages', newMessage);\n      dispatchMessages({\n        type: 'ADD_MESSAGE',\n        payload: newMessage\n      });\n      setInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Type a message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageInput, \"DBLHs3/D0+LICZDGI9dD4K/Escg=\", false, function () {\n  return [useIndexedDB];\n});\n_c = MessageInput;\nexport default MessageInput;\nvar _c;\n$RefreshReg$(_c, \"MessageInput\");","map":{"version":3,"names":["React","useContext","useState","GlobalContext","useIndexedDB","jsxDEV","_jsxDEV","MessageInput","_s","input","setInput","dispatchMessages","selectedContact","addToDB","handleSend","newMessage","id","Date","now","text","sender","timestamp","toLocaleTimeString","contactId","type","payload","error","console","className","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/chatsphere/src/components/MessageInput.jsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/messageInput.css';\n\nconst MessageInput = () => {\n    const [input, setInput] = useState('');\n    const { dispatchMessages, selectedContact } = useContext(GlobalContext);\n    const { addToDB } = useIndexedDB();\n\n    const handleSend = async () => {\n        if (!selectedContact) return; // Prevent sending without a selected contact\n\n        const newMessage = {\n            id: Date.now(),\n            text: input,\n            sender: 'me',\n            timestamp: new Date().toLocaleTimeString(),\n            contactId: selectedContact, // Associate with selected contact\n        };\n\n        try {\n            await addToDB('messages', newMessage);\n            dispatchMessages({ type: 'ADD_MESSAGE', payload: newMessage });\n            setInput('');\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    return (\n        <div className=\"message-input\">\n            <input\n                type=\"text\"\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                placeholder=\"Type a message\"\n            />\n            <button onClick={handleSend}>Send</button>\n        </div>\n    );\n};\n\nexport default MessageInput;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAES,gBAAgB;IAAEC;EAAgB,CAAC,GAAGX,UAAU,CAACE,aAAa,CAAC;EACvE,MAAM;IAAEU;EAAQ,CAAC,GAAGT,YAAY,CAAC,CAAC;EAElC,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI,CAACF,eAAe,EAAE,OAAO,CAAC;;IAE9B,MAAMG,UAAU,GAAG;MACfC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,IAAI,EAAEV,KAAK;MACXW,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACK,kBAAkB,CAAC,CAAC;MAC1CC,SAAS,EAAEX,eAAe,CAAE;IAChC,CAAC;IAED,IAAI;MACA,MAAMC,OAAO,CAAC,UAAU,EAAEE,UAAU,CAAC;MACrCJ,gBAAgB,CAAC;QAAEa,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEV;MAAW,CAAC,CAAC;MAC9DL,QAAQ,CAAC,EAAE,CAAC;IAChB,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,oBACIpB,OAAA;IAAKsB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC1BvB,OAAA;MACIkB,IAAI,EAAC,MAAM;MACXM,KAAK,EAAErB,KAAM;MACbsB,QAAQ,EAAGC,CAAC,IAAKtB,QAAQ,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,WAAW,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eACFhC,OAAA;MAAQiC,OAAO,EAAEzB,UAAW;MAAAe,QAAA,EAAC;IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEd,CAAC;AAAC9B,EAAA,CApCID,YAAY;EAAA,QAGMH,YAAY;AAAA;AAAAoC,EAAA,GAH9BjC,YAAY;AAsClB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}