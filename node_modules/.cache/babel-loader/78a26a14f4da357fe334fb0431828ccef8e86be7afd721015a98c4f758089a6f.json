{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\chatsphere\\\\src\\\\components\\\\ContactList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/contactList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContactList = () => {\n  _s();\n  const {\n    contacts,\n    dispatchContacts,\n    selectedContact,\n    setSelectedContact\n  } = useContext(GlobalContext);\n  const {\n    getFromDB,\n    addToDB,\n    deleteFromDB,\n    updateInDB\n  } = useIndexedDB();\n  const [newContactName, setNewContactName] = useState('');\n  const [newContactPic, setNewContactPic] = useState('');\n  const [showForm, setShowForm] = useState(false);\n  const [showOptions, setShowOptions] = useState(false);\n  const [showArchived, setShowArchived] = useState(false);\n  const [archivedContacts, setArchivedContacts] = useState([]);\n  const [theme, setTheme] = useState('light');\n  const [favorites, setFavorites] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Close options menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (!event.target.closest('.contact-options') && !event.target.closest('.contact-pic-container')) {\n        setShowOptions(false);\n      }\n    };\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, []);\n\n  // Fetch contacts from IndexedDB or static data\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        const storedContacts = await getFromDB('contacts');\n        if (storedContacts.length) {\n          const sortedContacts = storedContacts.sort((a, b) => a.name.localeCompare(b.name));\n          dispatchContacts({\n            type: 'SET_CONTACTS',\n            payload: sortedContacts\n          });\n        } else {\n          const contactData = [{\n            id: 1,\n            name: 'Garvita',\n            pic: ''\n          }, {\n            id: 2,\n            name: 'Heena',\n            pic: ''\n          }, {\n            id: 3,\n            name: 'Sayani',\n            pic: ''\n          }\n          // Add more contacts here\n          ];\n          contactData.sort((a, b) => a.name.localeCompare(b.name)); // Sort initial data\n          contactData.forEach(contact => addToDB('contacts', contact));\n          dispatchContacts({\n            type: 'SET_CONTACTS',\n            payload: contactData\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n      }\n    };\n  }, [dispatchContacts, getFromDB, addToDB]);\n\n  // Add a new contact\n  const handleAddContact = async () => {\n    if (newContactName.trim()) {\n      const newContact = {\n        id: Date.now(),\n        name: newContactName,\n        pic: newContactPic || ''\n      };\n      await addToDB('contacts', newContact);\n\n      // Add the new contact and sort the list alphabetically by name\n      const updatedContacts = [...contacts, newContact].sort((a, b) => a.name.localeCompare(b.name));\n      dispatchContacts({\n        type: 'SET_CONTACTS',\n        payload: updatedContacts\n      });\n      setNewContactName('');\n      setNewContactPic('');\n      setShowForm(false); // Close the form\n    }\n  };\n\n  // Delete a contact\n  const handleDeleteContact = async id => {\n    await deleteFromDB('contacts', id);\n    dispatchContacts({\n      type: 'DELETE_CONTACT',\n      payload: id\n    });\n  };\n\n  // Archive contact\n  const handleArchiveContact = contact => {\n    setArchivedContacts(prev => [...prev, contact]);\n    handleDeleteContact(contact.id);\n  };\n\n  // Show contact options\n  const handleProfileClick = contact => {\n    setSelectedContact(contact.id);\n    setShowOptions(true);\n  };\n\n  // Edit contact\n  const handleEditContact = id => {\n    const contactToEdit = contacts.find(contact => contact.id === id);\n    if (contactToEdit) {\n      setNewContactName(contactToEdit.name);\n      setNewContactPic(contactToEdit.pic);\n      setShowForm(true);\n    }\n    setShowOptions(false);\n  };\n\n  // Update the contact's name\n  const handleUpdateContact = async () => {\n    if (newContactName.trim() && selectedContact) {\n      const updatedContact = {\n        id: selectedContact,\n        name: newContactName,\n        pic: newContactPic || ''\n      };\n      await updateInDB('contacts', updatedContact);\n      dispatchContacts({\n        type: 'UPDATE_CONTACT',\n        payload: updatedContact\n      });\n      setNewContactName('');\n      setNewContactPic('');\n      setShowForm(false);\n    }\n  };\n\n  // Always create a new contact when clicking the âž• button\n  const handleAddContactClick = () => {\n    setSelectedContact(null);\n    setNewContactName('');\n    setNewContactPic('');\n    setShowForm(true);\n  };\n\n  // Filter contacts based on search query\n  const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `contact-list ${theme}`,\n    children: [showArchived && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"archived-contacts\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Archived Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"archivedItems\",\n        children: archivedContacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-pic-container\",\n            children: contact.pic ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: contact.pic,\n              alt: contact.name,\n              className: \"contact-pic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"contact-initial\",\n              children: contact.name[0].toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"contact-name\",\n              children: contact.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 33\n          }, this)]\n        }, contact.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"add-contact-icon\",\n        onClick: handleAddContactClick,\n        children: \"\\u2795\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"theme-toggle\",\n        onClick: () => setTheme(theme === 'light' ? 'dark' : 'light'),\n        children: \"\\uD83C\\uDF17\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search contacts\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value),\n        className: \"search-bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-contact-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter contact name\",\n        value: newContactName,\n        onChange: e => setNewContactName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter profile picture URL (optional)\",\n        value: newContactPic,\n        onChange: e => setNewContactPic(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, this), selectedContact ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateContact,\n        children: \"Update Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddContact,\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-list-container\",\n      children: filteredContacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `contact-item ${selectedContact === contact.id ? 'selected' : ''}`,\n        onClick: () => setSelectedContact(contact.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-pic-container\",\n          onClick: () => handleProfileClick(contact),\n          children: contact.pic ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: contact.pic,\n            alt: contact.name,\n            className: \"contact-pic\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-initial\",\n            children: contact.name[0].toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-info\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"contact-name\",\n            children: contact.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 25\n        }, this)]\n      }, contact.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), showOptions && selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEditContact(selectedContact),\n        children: \"Edit Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDeleteContact(selectedContact),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n_s(ContactList, \"ZIbf1pi/uJOdOTzgkFTXKko5/Lk=\", false, function () {\n  return [useIndexedDB];\n});\n_c = ContactList;\nexport default ContactList;\nvar _c;\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"names":["React","useContext","useEffect","useState","GlobalContext","useIndexedDB","jsxDEV","_jsxDEV","ContactList","_s","contacts","dispatchContacts","selectedContact","setSelectedContact","getFromDB","addToDB","deleteFromDB","updateInDB","newContactName","setNewContactName","newContactPic","setNewContactPic","showForm","setShowForm","showOptions","setShowOptions","showArchived","setShowArchived","archivedContacts","setArchivedContacts","theme","setTheme","favorites","setFavorites","searchQuery","setSearchQuery","handleClickOutside","event","target","closest","document","addEventListener","removeEventListener","fetchContacts","storedContacts","length","sortedContacts","sort","a","b","name","localeCompare","type","payload","contactData","id","pic","forEach","contact","error","console","handleAddContact","trim","newContact","Date","now","updatedContacts","handleDeleteContact","handleArchiveContact","prev","handleProfileClick","handleEditContact","contactToEdit","find","handleUpdateContact","updatedContact","handleAddContactClick","filteredContacts","filter","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","src","alt","toUpperCase","onClick","placeholder","value","onChange","e","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/chatsphere/src/components/ContactList.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/contactList.css';\n\nconst ContactList = () => {\n    const { contacts, dispatchContacts, selectedContact, setSelectedContact } = useContext(GlobalContext);\n    const { getFromDB, addToDB, deleteFromDB, updateInDB } = useIndexedDB();\n    const [newContactName, setNewContactName] = useState('');\n    const [newContactPic, setNewContactPic] = useState('');\n    const [showForm, setShowForm] = useState(false);\n    const [showOptions, setShowOptions] = useState(false);\n    const [showArchived, setShowArchived] = useState(false);\n    const [archivedContacts, setArchivedContacts] = useState([]);\n    const [theme, setTheme] = useState('light');\n    const [favorites, setFavorites] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    // Close options menu when clicking outside\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (!event.target.closest('.contact-options') && !event.target.closest('.contact-pic-container')) {\n                setShowOptions(false);\n            }\n        };\n\n        document.addEventListener('click', handleClickOutside);\n        return () => document.removeEventListener('click', handleClickOutside);\n    }, []);\n\n    // Fetch contacts from IndexedDB or static data\n    useEffect(() => {\n        const fetchContacts = async () => {\n            try {\n                const storedContacts = await getFromDB('contacts');\n                if (storedContacts.length) {\n                    const sortedContacts = storedContacts.sort((a, b) => a.name.localeCompare(b.name));\n                    dispatchContacts({ type: 'SET_CONTACTS', payload: sortedContacts });\n                } else {\n                    const contactData = [\n                        { id: 1, name: 'Garvita', pic: '' },\n                        { id: 2, name: 'Heena', pic: '' },\n                        { id: 3, name: 'Sayani', pic: '' },\n                        // Add more contacts here\n                    ];\n                    contactData.sort((a, b) => a.name.localeCompare(b.name)); // Sort initial data\n                    contactData.forEach((contact) => addToDB('contacts', contact));\n                    dispatchContacts({ type: 'SET_CONTACTS', payload: contactData });\n                }\n            } catch (error) {\n                console.error('Error fetching contacts:', error);\n            }\n        };\n\n    }, [dispatchContacts, getFromDB, addToDB]);\n\n    // Add a new contact\n    const handleAddContact = async () => {\n        if (newContactName.trim()) {\n            const newContact = {\n                id: Date.now(),\n                name: newContactName,\n                pic: newContactPic || '',\n            };\n\n            await addToDB('contacts', newContact);\n\n            // Add the new contact and sort the list alphabetically by name\n            const updatedContacts = [...contacts, newContact].sort((a, b) =>\n                a.name.localeCompare(b.name)\n            );\n\n            dispatchContacts({ type: 'SET_CONTACTS', payload: updatedContacts });\n\n            setNewContactName('');\n            setNewContactPic('');\n            setShowForm(false); // Close the form\n        }\n    };\n\n\n    // Delete a contact\n    const handleDeleteContact = async (id) => {\n        await deleteFromDB('contacts', id);\n        dispatchContacts({ type: 'DELETE_CONTACT', payload: id });\n    };\n\n    // Archive contact\n    const handleArchiveContact = (contact) => {\n        setArchivedContacts((prev) => [...prev, contact]);\n        handleDeleteContact(contact.id);\n    };\n\n    // Show contact options\n    const handleProfileClick = (contact) => {\n        setSelectedContact(contact.id);\n        setShowOptions(true);\n    };\n\n    // Edit contact\n    const handleEditContact = (id) => {\n        const contactToEdit = contacts.find((contact) => contact.id === id);\n        if (contactToEdit) {\n            setNewContactName(contactToEdit.name);\n            setNewContactPic(contactToEdit.pic);\n            setShowForm(true);\n        }\n        setShowOptions(false);\n    };\n\n    // Update the contact's name\n    const handleUpdateContact = async () => {\n        if (newContactName.trim() && selectedContact) {\n            const updatedContact = {\n                id: selectedContact,\n                name: newContactName,\n                pic: newContactPic || '',\n            };\n            await updateInDB('contacts', updatedContact);\n            dispatchContacts({ type: 'UPDATE_CONTACT', payload: updatedContact });\n            setNewContactName('');\n            setNewContactPic('');\n            setShowForm(false);\n        }\n    };\n\n    // Always create a new contact when clicking the âž• button\n    const handleAddContactClick = () => {\n        setSelectedContact(null);\n        setNewContactName('');\n        setNewContactPic('');\n        setShowForm(true);\n    };\n\n    // Filter contacts based on search query\n    const filteredContacts = contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    return (\n        <div className={`contact-list ${theme}`}>\n            {/* Archived Contacts Section */}\n            {showArchived && (\n                <div className=\"archived-contacts\">\n                    <h3>Archived Contacts</h3>\n                    <div id=\"archivedItems\">\n                        {archivedContacts.map((contact) => (\n                            <div key={contact.id} className=\"contact-item\">\n                                <div className=\"contact-pic-container\">\n                                    {contact.pic ? (\n                                        <img src={contact.pic} alt={contact.name} className=\"contact-pic\" />\n                                    ) : (\n                                        <div className=\"contact-initial\">\n                                            {contact.name[0].toUpperCase()}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"contact-info\">\n                                    <span className=\"contact-name\">{contact.name}</span>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n\n            {/* Contact List Header */}\n            <div className=\"contact-list-header\">\n                <h2>Chats</h2>\n                <span className=\"add-contact-icon\" onClick={handleAddContactClick}>\n                    âž•\n                </span>\n                <span className=\"theme-toggle\" onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n                    ðŸŒ—\n                </span>\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Search contacts\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"search-bar\"\n                />\n            </div>\n\n            {/* Add/Edit Contact Form */}\n            {showForm && (\n                <div className=\"add-contact-form\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter contact name\"\n                        value={newContactName}\n                        onChange={(e) => setNewContactName(e.target.value)}\n                    />\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter profile picture URL (optional)\"\n                        value={newContactPic}\n                        onChange={(e) => setNewContactPic(e.target.value)}\n                    />\n                    {selectedContact ? (\n                        <button onClick={handleUpdateContact}>Update Contact</button>\n                    ) : (\n                        <button onClick={handleAddContact}>Add Contact</button>\n                    )}\n                </div>\n            )}\n\n            {/* Contact List */}\n            <div className=\"contact-list-container\">\n                {filteredContacts.map((contact) => (\n                    <div\n                        key={contact.id}\n                        className={`contact-item ${selectedContact === contact.id ? 'selected' : ''}`}\n                        onClick={() => setSelectedContact(contact.id)}\n                    >\n                        <div className=\"contact-pic-container\" onClick={() => handleProfileClick(contact)}>\n                            {contact.pic ? (\n                                <img src={contact.pic} alt={contact.name} className=\"contact-pic\" />\n                            ) : (\n                                <div className=\"contact-initial\">{contact.name[0].toUpperCase()}</div>\n                            )}\n                        </div>\n                        <div className=\"contact-info\">\n                            <span className=\"contact-name\">{contact.name}</span>\n                        </div>\n                    </div>\n                ))}\n            </div>\n\n            {/* Contact Options Menu */}\n            {showOptions && selectedContact && (\n                <div className=\"contact-options\">\n                    <button onClick={() => handleEditContact(selectedContact)}>Edit Contact</button>\n                    <button onClick={() => handleDeleteContact(selectedContact)}>Delete</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ContactList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}