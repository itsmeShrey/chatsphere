{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\chatsphere\\\\src\\\\components\\\\MessageInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport useInstantDB from '../hooks/useInstantDB';\nimport '../styles/messageInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageInput = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const {\n    dispatchMessages\n  } = useContext(GlobalContext);\n  const {\n    addToDB\n  } = useIndexedDB();\n  const {\n    sendMessage\n  } = useInstantDB();\n  const handleSend = async () => {\n    const newMessage = {\n      id: Date.now(),\n      text: input,\n      sender: 'me',\n      timestamp: new Date().toLocaleTimeString()\n    };\n    try {\n      // Save to IndexedDB\n      await addToDB('messages', newMessage);\n\n      // Send to InstantDB\n      await sendMessage(newMessage);\n      dispatchMessages({\n        type: 'ADD_MESSAGE',\n        payload: newMessage\n      });\n      setInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Type a message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageInput, \"l0BHiY0Ifm1rCwxVI6vvbT1tqf4=\", false, function () {\n  return [useIndexedDB, useInstantDB];\n});\n_c = MessageInput;\nexport default MessageInput;\nvar _c;\n$RefreshReg$(_c, \"MessageInput\");","map":{"version":3,"names":["React","useContext","useState","GlobalContext","useIndexedDB","useInstantDB","jsxDEV","_jsxDEV","MessageInput","_s","input","setInput","dispatchMessages","addToDB","sendMessage","handleSend","newMessage","id","Date","now","text","sender","timestamp","toLocaleTimeString","type","payload","error","console","className","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/chatsphere/src/components/MessageInput.jsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport useInstantDB from '../hooks/useInstantDB';\nimport '../styles/messageInput.css';\n\nconst MessageInput = () => {\n    const [input, setInput] = useState('');\n    const { dispatchMessages } = useContext(GlobalContext);\n    const { addToDB } = useIndexedDB();\n    const { sendMessage } = useInstantDB();\n\n    const handleSend = async () => {\n        const newMessage = {\n            id: Date.now(),\n            text: input,\n            sender: 'me',\n            timestamp: new Date().toLocaleTimeString(),\n        };\n\n        try {\n            // Save to IndexedDB\n            await addToDB('messages', newMessage);\n\n            // Send to InstantDB\n            await sendMessage(newMessage);\n\n            dispatchMessages({ type: 'ADD_MESSAGE', payload: newMessage });\n            setInput('');\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    return (\n        <div className=\"message-input\">\n            <input\n                type=\"text\"\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                placeholder=\"Type a message\"\n            />\n            <button onClick={handleSend}>Send</button>\n        </div>\n    );\n};\n\nexport default MessageInput;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAEU;EAAiB,CAAC,GAAGX,UAAU,CAACE,aAAa,CAAC;EACtD,MAAM;IAAEU;EAAQ,CAAC,GAAGT,YAAY,CAAC,CAAC;EAClC,MAAM;IAAEU;EAAY,CAAC,GAAGT,YAAY,CAAC,CAAC;EAEtC,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,MAAMC,UAAU,GAAG;MACfC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,IAAI,EAAEV,KAAK;MACXW,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACK,kBAAkB,CAAC;IAC7C,CAAC;IAED,IAAI;MACA;MACA,MAAMV,OAAO,CAAC,UAAU,EAAEG,UAAU,CAAC;;MAErC;MACA,MAAMF,WAAW,CAACE,UAAU,CAAC;MAE7BJ,gBAAgB,CAAC;QAAEY,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAET;MAAW,CAAC,CAAC;MAC9DL,QAAQ,CAAC,EAAE,CAAC;IAChB,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,oBACInB,OAAA;IAAKqB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC1BtB,OAAA;MACIiB,IAAI,EAAC,MAAM;MACXM,KAAK,EAAEpB,KAAM;MACbqB,QAAQ,EAAGC,CAAC,IAAKrB,QAAQ,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,WAAW,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eACF/B,OAAA;MAAQgC,OAAO,EAAExB,UAAW;MAAAc,QAAA,EAAC;IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEd,CAAC;AAAC7B,EAAA,CAvCID,YAAY;EAAA,QAGMJ,YAAY,EACRC,YAAY;AAAA;AAAAmC,EAAA,GAJlChC,YAAY;AAyClB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}