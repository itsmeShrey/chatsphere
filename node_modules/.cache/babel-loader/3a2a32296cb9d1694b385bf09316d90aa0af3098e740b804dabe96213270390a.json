{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\chatsphere\\\\src\\\\components\\\\ContactList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/contactList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContactList = () => {\n  _s();\n  const {\n    contacts,\n    dispatchContacts,\n    selectedContact,\n    setSelectedContact\n  } = useContext(GlobalContext);\n  const {\n    getFromDB,\n    addToDB,\n    deleteFromDB,\n    updateInDB\n  } = useIndexedDB(); // Added updateInDB\n  const [newContactName, setNewContactName] = useState('');\n  const [newContactPic, setNewContactPic] = useState('');\n  const [showForm, setShowForm] = useState(false); // Toggle for add contact form\n  const [showOptions, setShowOptions] = useState(false); // To show contact options\n  const [showArchived, setShowArchived] = useState(false); // Toggle archived section\n  const [archivedContacts, setArchivedContacts] = useState([]); // State for archived contacts\n  const [theme, setTheme] = useState('light'); // Default theme\n  const [favorites, setFavorites] = useState([]); // State for favorites\n\n  // Fetch contacts from IndexedDB or static data\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        const storedContacts = await getFromDB('contacts');\n        if (storedContacts.length) {\n          dispatchContacts({\n            type: 'SET_CONTACTS',\n            payload: storedContacts\n          });\n        } else {\n          const contactData = [{\n            id: 1,\n            name: 'Alice',\n            pic: ''\n          }, {\n            id: 2,\n            name: 'Bob',\n            pic: ''\n          }];\n          contactData.forEach(contact => addToDB('contacts', contact));\n          dispatchContacts({\n            type: 'SET_CONTACTS',\n            payload: contactData\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n      }\n    };\n    fetchContacts();\n  }, [dispatchContacts, getFromDB, addToDB]);\n\n  // Add a new contact\n  const handleAddContact = async () => {\n    if (newContactName.trim()) {\n      const newContact = {\n        id: Date.now(),\n        name: newContactName,\n        pic: newContactPic || '' // Optional profile picture\n      };\n      await addToDB('contacts', newContact);\n      dispatchContacts({\n        type: 'ADD_CONTACT',\n        payload: newContact\n      });\n      setNewContactName('');\n      setNewContactPic('');\n      setShowForm(false); // Close the form\n    }\n  };\n\n  // Delete a contact\n  const handleDeleteContact = async id => {\n    await deleteFromDB('contacts', id);\n    dispatchContacts({\n      type: 'DELETE_CONTACT',\n      payload: id\n    });\n  };\n\n  // Archive contact\n  const handleArchiveContact = contact => {\n    setArchivedContacts(prev => [...prev, contact]); // Add to archived contacts\n    handleDeleteContact(contact.id); // Remove from the active contacts list\n  };\n\n  // Show contact options\n  const handleProfileClick = contact => {\n    setSelectedContact(contact.id);\n    setShowOptions(true);\n  };\n\n  // Block contact (add your own logic)\n  const handleBlockContact = id => {\n    console.log(`Contact with ID ${id} is blocked.`);\n    setShowOptions(false);\n  };\n\n  // Edit contact (opens form to edit name)\n  const handleEditContact = id => {\n    const contactToEdit = contacts.find(contact => contact.id === id);\n    if (contactToEdit) {\n      setNewContactName(contactToEdit.name);\n      setShowForm(true); // Show the form to edit contact\n    }\n    setShowOptions(false);\n  };\n\n  // Update the contact's name\n  const handleUpdateContact = async () => {\n    if (newContactName.trim() && selectedContact) {\n      const updatedContact = {\n        id: selectedContact,\n        name: newContactName,\n        pic: newContactPic || ''\n      };\n      await updateInDB('contacts', updatedContact); // Update contact in IndexedDB\n      dispatchContacts({\n        type: 'UPDATE_CONTACT',\n        payload: updatedContact\n      }); // Update global state or UI\n      setNewContactName('');\n      setNewContactPic('');\n      setShowForm(false); // Close the form\n    }\n  };\n\n  // Add to favorites\n  const handleAddToFavorites = id => {\n    const contactToAdd = contacts.find(contact => contact.id === id);\n    if (contactToAdd) {\n      setFavorites(prev => [...prev, contactToAdd]);\n    }\n    setShowOptions(false);\n  };\n\n  // Toggle Theme (Emoji Click)\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    document.body.className = newTheme; // Apply theme to the body\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `contact-list ${theme}`,\n    children: [showArchived && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"archived-contacts\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Archived Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"archivedItems\",\n        children: archivedContacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-pic-container\",\n            children: contact.pic ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: contact.pic,\n              alt: contact.name,\n              className: \"contact-pic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"contact-initial\",\n              children: contact.name[0].toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"contact-name\",\n              children: contact.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 33\n          }, this)]\n        }, contact.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Contacts\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"add-contact-icon\",\n          onClick: () => setShowForm(!showForm),\n          children: \"\\u2795\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"theme-toggle\",\n          onClick: toggleTheme,\n          children: \"\\uD83C\\uDF17\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"archive-toggle-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowArchived(!showArchived),\n          children: showArchived ? 'Hide Archived' : 'Show Archived'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-contact-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter contact name\",\n        value: newContactName,\n        onChange: e => setNewContactName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter profile picture URL (optional)\",\n        value: newContactPic,\n        onChange: e => setNewContactPic(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this), selectedContact ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateContact,\n        children: \"Update Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddContact,\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this), contacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `contact-item ${selectedContact === contact.id ? 'selected' : ''}`,\n      onClick: () => setSelectedContact(contact.id),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-pic-container\",\n        onClick: () => handleProfileClick(contact),\n        children: contact.pic ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: contact.pic,\n          alt: contact.name,\n          className: \"contact-pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-initial\",\n          children: contact.name[0].toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-info\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"contact-name\",\n          children: contact.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this), favorites.some(fav => fav.id === contact.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"favorite-icon\",\n        children: \"\\u2764\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleArchiveContact(contact),\n        children: \"Archive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this)]\n    }, contact.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }, this)), showOptions && selectedContact && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBlockContact(selectedContact),\n        children: \"Block\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEditContact(selectedContact),\n        children: \"Edit Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAddToFavorites(selectedContact),\n        children: \"Add to Favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDeleteContact(selectedContact),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(ContactList, \"SM9RXa07Ka9J3gvsbsWN3KnP2L0=\", false, function () {\n  return [useIndexedDB];\n});\n_c = ContactList;\nexport default ContactList;\nvar _c;\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"names":["React","useContext","useEffect","useState","GlobalContext","useIndexedDB","jsxDEV","_jsxDEV","ContactList","_s","contacts","dispatchContacts","selectedContact","setSelectedContact","getFromDB","addToDB","deleteFromDB","updateInDB","newContactName","setNewContactName","newContactPic","setNewContactPic","showForm","setShowForm","showOptions","setShowOptions","showArchived","setShowArchived","archivedContacts","setArchivedContacts","theme","setTheme","favorites","setFavorites","fetchContacts","storedContacts","length","type","payload","contactData","id","name","pic","forEach","contact","error","console","handleAddContact","trim","newContact","Date","now","handleDeleteContact","handleArchiveContact","prev","handleProfileClick","handleBlockContact","log","handleEditContact","contactToEdit","find","handleUpdateContact","updatedContact","handleAddToFavorites","contactToAdd","toggleTheme","newTheme","document","body","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","src","alt","toUpperCase","onClick","placeholder","value","onChange","e","target","some","fav","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/chatsphere/src/components/ContactList.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { GlobalContext } from '../context/GlobalContext';\nimport useIndexedDB from '../hooks/useIndexedDB';\nimport '../styles/contactList.css';\n\nconst ContactList = () => {\n    const { contacts, dispatchContacts, selectedContact, setSelectedContact } = useContext(GlobalContext);\n    const { getFromDB, addToDB, deleteFromDB, updateInDB } = useIndexedDB(); // Added updateInDB\n    const [newContactName, setNewContactName] = useState('');\n    const [newContactPic, setNewContactPic] = useState('');\n    const [showForm, setShowForm] = useState(false); // Toggle for add contact form\n    const [showOptions, setShowOptions] = useState(false); // To show contact options\n    const [showArchived, setShowArchived] = useState(false); // Toggle archived section\n    const [archivedContacts, setArchivedContacts] = useState([]); // State for archived contacts\n    const [theme, setTheme] = useState('light'); // Default theme\n    const [favorites, setFavorites] = useState([]); // State for favorites\n\n    // Fetch contacts from IndexedDB or static data\n    useEffect(() => {\n        const fetchContacts = async () => {\n            try {\n                const storedContacts = await getFromDB('contacts');\n                if (storedContacts.length) {\n                    dispatchContacts({ type: 'SET_CONTACTS', payload: storedContacts });\n                } else {\n                    const contactData = [\n                        { id: 1, name: 'Alice', pic: '' },\n                        { id: 2, name: 'Bob', pic: '' },\n                    ];\n                    contactData.forEach((contact) => addToDB('contacts', contact));\n                    dispatchContacts({ type: 'SET_CONTACTS', payload: contactData });\n                }\n            } catch (error) {\n                console.error('Error fetching contacts:', error);\n            }\n        };\n\n        fetchContacts();\n    }, [dispatchContacts, getFromDB, addToDB]);\n\n    // Add a new contact\n    const handleAddContact = async () => {\n        if (newContactName.trim()) {\n            const newContact = {\n                id: Date.now(),\n                name: newContactName,\n                pic: newContactPic || '', // Optional profile picture\n            };\n            await addToDB('contacts', newContact);\n            dispatchContacts({ type: 'ADD_CONTACT', payload: newContact });\n            setNewContactName('');\n            setNewContactPic('');\n            setShowForm(false); // Close the form\n        }\n    };\n\n    // Delete a contact\n    const handleDeleteContact = async (id) => {\n        await deleteFromDB('contacts', id);\n        dispatchContacts({ type: 'DELETE_CONTACT', payload: id });\n    };\n\n    // Archive contact\n    const handleArchiveContact = (contact) => {\n        setArchivedContacts((prev) => [...prev, contact]); // Add to archived contacts\n        handleDeleteContact(contact.id); // Remove from the active contacts list\n    };\n\n    // Show contact options\n    const handleProfileClick = (contact) => {\n        setSelectedContact(contact.id);\n        setShowOptions(true);\n    };\n\n    // Block contact (add your own logic)\n    const handleBlockContact = (id) => {\n        console.log(`Contact with ID ${id} is blocked.`);\n        setShowOptions(false);\n    };\n\n    // Edit contact (opens form to edit name)\n    const handleEditContact = (id) => {\n        const contactToEdit = contacts.find((contact) => contact.id === id);\n        if (contactToEdit) {\n            setNewContactName(contactToEdit.name);\n            setShowForm(true); // Show the form to edit contact\n        }\n        setShowOptions(false);\n    };\n\n    // Update the contact's name\n    const handleUpdateContact = async () => {\n        if (newContactName.trim() && selectedContact) {\n            const updatedContact = {\n                id: selectedContact,\n                name: newContactName,\n                pic: newContactPic || '',\n            };\n            await updateInDB('contacts', updatedContact); // Update contact in IndexedDB\n            dispatchContacts({ type: 'UPDATE_CONTACT', payload: updatedContact }); // Update global state or UI\n            setNewContactName('');\n            setNewContactPic('');\n            setShowForm(false); // Close the form\n        }\n    };\n\n\n    // Add to favorites\n    const handleAddToFavorites = (id) => {\n        const contactToAdd = contacts.find((contact) => contact.id === id);\n        if (contactToAdd) {\n            setFavorites((prev) => [...prev, contactToAdd]);\n        }\n        setShowOptions(false);\n    };\n\n    // Toggle Theme (Emoji Click)\n    const toggleTheme = () => {\n        const newTheme = theme === 'light' ? 'dark' : 'light';\n        setTheme(newTheme);\n        document.body.className = newTheme; // Apply theme to the body\n    };\n\n    return (\n        <div className={`contact-list ${theme}`}>\n            {/* Archived Contacts Section */}\n            {showArchived && (\n                <div className=\"archived-contacts\">\n                    <h3>Archived Contacts</h3>\n                    <div id=\"archivedItems\">\n                        {archivedContacts.map((contact) => (\n                            <div key={contact.id} className=\"contact-item\">\n                                <div className=\"contact-pic-container\">\n                                    {contact.pic ? (\n                                        <img src={contact.pic} alt={contact.name} className=\"contact-pic\" />\n                                    ) : (\n                                        <div className=\"contact-initial\">\n                                            {contact.name[0].toUpperCase()}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"contact-info\">\n                                    <span className=\"contact-name\">{contact.name}</span>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n\n            {/* Contact List Header */}\n            <div className=\"contact-list-header\">\n                <h2>\n                    Contacts\n                    <span className=\"add-contact-icon\" onClick={() => setShowForm(!showForm)}>\n                        ➕\n                    </span>\n                    <span className=\"theme-toggle\" onClick={toggleTheme}>\n                        🌗\n                    </span>\n                </h2>\n\n                <div className=\"archive-toggle-container\">\n                    <button onClick={() => setShowArchived(!showArchived)}>\n                        {showArchived ? 'Hide Archived' : 'Show Archived'}\n                    </button>\n                </div>\n            </div>\n\n            {/* Add/Edit Contact Form */}\n            {showForm && (\n                <div className=\"add-contact-form\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter contact name\"\n                        value={newContactName}\n                        onChange={(e) => setNewContactName(e.target.value)}\n                    />\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter profile picture URL (optional)\"\n                        value={newContactPic}\n                        onChange={(e) => setNewContactPic(e.target.value)}\n                    />\n                    {selectedContact ? (\n                        <button onClick={handleUpdateContact}>Update Contact</button>\n                    ) : (\n                        <button onClick={handleAddContact}>Add Contact</button>\n                    )}\n                </div>\n            )}\n\n            {/* Contact List */}\n            {contacts.map((contact) => (\n                <div\n                    key={contact.id}\n                    className={`contact-item ${selectedContact === contact.id ? 'selected' : ''}`}\n                    onClick={() => setSelectedContact(contact.id)}\n                >\n                    <div className=\"contact-pic-container\" onClick={() => handleProfileClick(contact)}>\n                        {contact.pic ? (\n                            <img src={contact.pic} alt={contact.name} className=\"contact-pic\" />\n                        ) : (\n                            <div className=\"contact-initial\">\n                                {contact.name[0].toUpperCase()}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"contact-info\">\n                        <span className=\"contact-name\">{contact.name}</span>\n                        \n                    </div>\n                    {favorites.some((fav) => fav.id === contact.id) && (\n                        <span className=\"favorite-icon\">❤️</span>\n                    )}\n                    <button onClick={() => handleArchiveContact(contact)}>Archive</button>\n                </div>\n            ))}\n\n            {/* Contact Options Menu */}\n            {showOptions && selectedContact && (\n                <div className=\"contact-options\">\n                    <button onClick={() => handleBlockContact(selectedContact)}>Block</button>\n                    <button onClick={() => handleEditContact(selectedContact)}>Edit Contact</button>\n                    <button onClick={() => handleAddToFavorites(selectedContact)}>Add to Favorites</button>\n                    <button onClick={() => handleDeleteContact(selectedContact)}>Delete</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ContactList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}