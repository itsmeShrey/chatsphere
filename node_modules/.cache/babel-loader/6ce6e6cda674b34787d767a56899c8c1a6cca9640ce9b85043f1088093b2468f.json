{"ast":null,"code":"import { openDB } from 'idb';\nconst useIndexedDB = () => {\n  // Initialize the database\n  const initDB = async () => {\n    return openDB('WhatsAppClone', 1, {\n      upgrade(db) {\n        if (!db.objectStoreNames.contains('contacts')) {\n          db.createObjectStore('contacts', {\n            keyPath: 'id'\n          });\n        }\n        if (!db.objectStoreNames.contains('messages')) {\n          db.createObjectStore('messages', {\n            keyPath: 'id'\n          });\n        }\n      }\n    });\n  };\n\n  // Fetch all data from a store\n  const getFromDB = async storeName => {\n    const db = await initDB();\n    return db.getAll(storeName);\n  };\n\n  // Add or update data in a store\n  const addToDB = async (storeName, data) => {\n    const db = await initDB();\n    return db.put(storeName, data);\n  };\n\n  // Delete data from a store\n  const deleteFromDB = async (storeName, id) => {\n    const db = await initDB();\n    return db.delete(storeName, id);\n  };\n  return {\n    getFromDB,\n    addToDB,\n    deleteFromDB\n  };\n};\nexport default useIndexedDB;","map":{"version":3,"names":["openDB","useIndexedDB","initDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","getFromDB","storeName","getAll","addToDB","data","put","deleteFromDB","id","delete"],"sources":["C:/Users/User/OneDrive/Desktop/chatsphere/src/hooks/useIndexedDB.js"],"sourcesContent":["import { openDB } from 'idb';\n\nconst useIndexedDB = () => {\n    // Initialize the database\n    const initDB = async () => {\n        return openDB('WhatsAppClone', 1, {\n            upgrade(db) {\n                if (!db.objectStoreNames.contains('contacts')) {\n                    db.createObjectStore('contacts', { keyPath: 'id' });\n                }\n                if (!db.objectStoreNames.contains('messages')) {\n                    db.createObjectStore('messages', { keyPath: 'id' });\n                }\n            },\n        });\n    };\n\n    // Fetch all data from a store\n    const getFromDB = async (storeName) => {\n        const db = await initDB();\n        return db.getAll(storeName);\n    };\n\n    // Add or update data in a store\n    const addToDB = async (storeName, data) => {\n        const db = await initDB();\n        return db.put(storeName, data);\n    };\n\n    // Delete data from a store\n    const deleteFromDB = async (storeName, id) => {\n        const db = await initDB();\n        return db.delete(storeName, id);\n    };\n\n    return { getFromDB, addToDB, deleteFromDB };\n};\n\nexport default useIndexedDB;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,KAAK;AAE5B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB;EACA,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB,OAAOF,MAAM,CAAC,eAAe,EAAE,CAAC,EAAE;MAC9BG,OAAOA,CAACC,EAAE,EAAE;QACR,IAAI,CAACA,EAAE,CAACC,gBAAgB,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;UAC3CF,EAAE,CAACG,iBAAiB,CAAC,UAAU,EAAE;YAAEC,OAAO,EAAE;UAAK,CAAC,CAAC;QACvD;QACA,IAAI,CAACJ,EAAE,CAACC,gBAAgB,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;UAC3CF,EAAE,CAACG,iBAAiB,CAAC,UAAU,EAAE;YAAEC,OAAO,EAAE;UAAK,CAAC,CAAC;QACvD;MACJ;IACJ,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG,MAAOC,SAAS,IAAK;IACnC,MAAMN,EAAE,GAAG,MAAMF,MAAM,CAAC,CAAC;IACzB,OAAOE,EAAE,CAACO,MAAM,CAACD,SAAS,CAAC;EAC/B,CAAC;;EAED;EACA,MAAME,OAAO,GAAG,MAAAA,CAAOF,SAAS,EAAEG,IAAI,KAAK;IACvC,MAAMT,EAAE,GAAG,MAAMF,MAAM,CAAC,CAAC;IACzB,OAAOE,EAAE,CAACU,GAAG,CAACJ,SAAS,EAAEG,IAAI,CAAC;EAClC,CAAC;;EAED;EACA,MAAME,YAAY,GAAG,MAAAA,CAAOL,SAAS,EAAEM,EAAE,KAAK;IAC1C,MAAMZ,EAAE,GAAG,MAAMF,MAAM,CAAC,CAAC;IACzB,OAAOE,EAAE,CAACa,MAAM,CAACP,SAAS,EAAEM,EAAE,CAAC;EACnC,CAAC;EAED,OAAO;IAAEP,SAAS;IAAEG,OAAO;IAAEG;EAAa,CAAC;AAC/C,CAAC;AAED,eAAed,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}